<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>DeathofBrain的小屋</title>
        <link>https://deathofbrain.github.io/</link>
        <description>Recent content on DeathofBrain的小屋</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>DeathofBrain</copyright><atom:link href="https://deathofbrain.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Vim之旅</title>
        <link>https://deathofbrain.github.io/p/vim/</link>
        <pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://deathofbrain.github.io/p/vim/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;此文档使用VSCode+Vim模拟插件进行编写&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;启程&#34;&gt;启程
&lt;/h2&gt;&lt;p&gt;闲来无事，突然想学Vim了。直到现在也只会基本操作，惨&lt;/p&gt;
&lt;p&gt;参考文献：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《学习vi与Vim编辑器 8th Edition》&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vim三大模式介绍&#34;&gt;Vim三大模式介绍
&lt;/h3&gt;&lt;p&gt;Vim分为三个模式：普通模式、插入模式、ex模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;普通模式&lt;/p&gt;
&lt;p&gt;当按键用于执行命令时的模式，一开始进Vim时就是普通模式，通过按Esc进入。请注意，vi与Vim在普通模式时指令区分大小写&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;普通模式又称命令模式，即按键只处理命令，不直接插入到文本&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入模式&lt;/p&gt;
&lt;p&gt;通过按&lt;code&gt;i&lt;/code&gt;键进入，插入模式允许用户直接在光标处编辑文本，就像notepad一样&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ex模式&lt;/p&gt;
&lt;p&gt;在普通模式通过输入&lt;code&gt;:&lt;/code&gt;进入，ex模式允许用户输入ex指令完成单行或跨行编辑，同样区分大小写。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ex命令是ex行编辑器使用的指令，ex行编辑器是古早Unix系统使用的单行终端编辑器，属于Linux底层编辑器&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般来说，普通模式用于快速翻阅代码或快捷更改字符或删除行等，插入模式用于普通编辑文本，ex模式则用于搜索全文，或使用高级指令完成编辑操作等。&lt;/p&gt;
&lt;h3 id=&#34;打开文件&#34;&gt;打开文件
&lt;/h3&gt;&lt;p&gt;一句话：&lt;code&gt;vim [filename]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当然，有可能你需要先安装vim（笑）&lt;/p&gt;
&lt;h3 id=&#34;操作模式&#34;&gt;操作模式
&lt;/h3&gt;&lt;p&gt;第一次使用Vim时，你是否也曾敲打键盘，却没有任何字符输入？甚至莫名其妙把内容删除了？&lt;/p&gt;
&lt;p&gt;普通模式是这样的，当进入Vim时，默认会进入普通模式，此时键盘上每个按键都代表一个指令，而非代表内容的文本。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，并非所有按键都有对应的命令，而是说在普通模式中，Vim认为接收到的按键代表的是“命令”。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;此时，若想输入文本，请确保在小写状态下，按下&lt;code&gt;i&lt;/code&gt;键，进入插入模式，此时再键入的就是文本本身了。&lt;/p&gt;
&lt;h4 id=&#34;保存或者直接退出&#34;&gt;保存，或者直接退出
&lt;/h4&gt;&lt;p&gt;恭喜你，终于用Vim成功写了一点东西，也许是代码，也许是随便乱打的，那么来到了第二个问题：我该怎么退出这沟槽的Vim？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;保存退出&lt;/p&gt;
&lt;p&gt;在普通模式下，按下&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;zz&lt;/code&gt;，也就是输入两个&lt;strong&gt;大写&lt;/strong&gt;的Z，这个是&lt;em&gt;保存并退出&lt;/em&gt;指令，在一切顺利的情况下，Vim会将缓存区中的文本写入文件，并退出程序。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不知道现在是什么模式？多按几下&lt;code&gt;Esc&lt;/code&gt;，就一定处于命令模式！&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;强制退出&lt;/p&gt;
&lt;p&gt;有时候，因为某些原因（虽然大多数是只读问题），Vim无法保存文件，并且会提示包括&lt;code&gt;[Read only]&lt;/code&gt;的信息。&lt;/p&gt;
&lt;p&gt;别慌，Vim可以通过ex指令实现强制退出。&lt;/p&gt;
&lt;p&gt;还记得怎么进入ex模式吗？按下&lt;code&gt;Shift&lt;/code&gt;+&lt;code&gt;；&lt;/code&gt;，也就是输入&lt;code&gt;:&lt;/code&gt;，此时你会看到终端最下面出现了&lt;code&gt;:&lt;/code&gt;，这代表着你成功进入了ex模式。&lt;/p&gt;
&lt;p&gt;紧接着，输入&lt;code&gt;q!&lt;/code&gt;，按下&lt;code&gt;Enter&lt;/code&gt;，成功退出！并且不会保存任何文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;!&lt;/code&gt;在ex模式中代表&lt;strong&gt;强制&lt;/strong&gt;，刚才的指令就是强制退出的意思。一般来说，如果没有修改任何文件的话，输入q就可以了。&lt;/p&gt;
&lt;p&gt;当然，ex指令下也可以保存退出，只需要输入&lt;code&gt;:wq&lt;/code&gt;并回车就可以了。具体指令会在后面详解。&lt;/p&gt;
&lt;p&gt;同时，从现在开始，将不再重复强调如何进入某种模式，也不再强调ex模式下需要用回车来执行指令。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;另存为&lt;/p&gt;
&lt;p&gt;ex模式下输入&lt;code&gt;w [filename]&lt;/code&gt;，即可另存为新文件。
当然，输入&lt;code&gt;w! [filename]&lt;/code&gt;会将内容&lt;strong&gt;覆盖&lt;/strong&gt;到已存在的文件中，无法撤回！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;!&lt;/code&gt;时还请三思。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;简单的文本编辑&#34;&gt;简单（？）的文本编辑
&lt;/h2&gt;&lt;p&gt;一般来说，学习上面内容后，就可以使用Vim简单进行编辑了，不过，在面对几千行的代码时，若是用方向键+插入去修改的话，我猜你肯定很想砸键盘。&lt;/p&gt;
&lt;p&gt;这部分内容主要讲述如何在上文基础上，使用简单易学的操作提高一些编辑的效率，让你砸键盘的欲望变得小一点。&lt;/p&gt;
&lt;h3 id=&#34;vi命令&#34;&gt;vi命令
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;复习：上文中，Vim有几种模式？都以什么方式进入？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Tips：可以将不同的模式想像成不同的键盘，在插入模式中，键盘功能就像平常一样。在普通模式中，每个键都有新的含义或是代表某种动作。&lt;/p&gt;
&lt;p&gt;在你按&lt;code&gt;Esc&lt;/code&gt;之前，插入命令之后的所有按键输入都被视为文本。&lt;/p&gt;
&lt;h3 id=&#34;移动光标&#34;&gt;移动光标
&lt;/h3&gt;&lt;p&gt;在进行编辑工作（看代码）的时候，更多的时候都是在文件中四处移动，使用各种命令编辑现有文本。&lt;/p&gt;
&lt;p&gt;本节首先讲述最基本的光标移动操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按上下左右四个方向将光标一次移动一个字符位置&lt;/li&gt;
&lt;li&gt;按照文本块（单词、句子或段落）向前或向后移动光标&lt;/li&gt;
&lt;li&gt;在文件中以&lt;strong&gt;屏&lt;/strong&gt;为单位移动光标&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;单一移动&#34;&gt;单一移动
&lt;/h4&gt;&lt;p&gt;虽然Vim支持方向键移动光标，但是更常用&lt;code&gt;h&lt;/code&gt;、&lt;code&gt;j&lt;/code&gt;、&lt;code&gt;k&lt;/code&gt;、&lt;code&gt;l&lt;/code&gt;进行光标移动。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;h&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向左移动一个位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;j&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;移动到下一行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;k&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;移动到上一行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;l&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向右移动一个字符位置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种移动方式的好处是：你的手指可以在不离开键盘中心区域的情况下四处移动光标。&lt;/p&gt;
&lt;p&gt;当然，移动光标前，请确保你在命令模式下使用。&lt;/p&gt;
&lt;h4 id=&#34;数量级参数&#34;&gt;数量级参数
&lt;/h4&gt;&lt;p&gt;在&lt;strong&gt;命令&lt;/strong&gt;前输入数字，此时这个数字被称为重复计数（repeat count）或复制因子（replication factor）&lt;/p&gt;
&lt;p&gt;现在，在Vim试一下&lt;code&gt;4l&lt;/code&gt;吧，你会发现，光标向右移动了四个位置，也就相当于你一次输入了4个&lt;code&gt;l&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;当然，数字的输入要在命令&lt;strong&gt;之前&lt;/strong&gt;，否则Vim永远也不知道数字的输入何时结束。&lt;/p&gt;
&lt;h4 id=&#34;行内移动&#34;&gt;行内移动
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;移动到行首：&lt;code&gt;0&lt;/code&gt;（数字0）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;移动到行尾：&lt;code&gt;$&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的行指的是文件中实际的一行，可以通过ex命令输入&lt;code&gt;set nu&lt;/code&gt;查看文件行号。&lt;/p&gt;
&lt;p&gt;也就是说，使用行首行尾移动时，有可能在屏幕中显示为跳转多个行，但实际上光标只在一行文本中移动。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;按文本块移动&#34;&gt;按文本块移动
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;请注意大小写&lt;/p&gt;
&lt;p&gt;此处的文本块仅指单词，后续部分会介绍按句子，按段落等。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;w&lt;/code&gt;：光标向右移动一个单词（由字母数字字符组成）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，此时单个符号和标点也视为一个单词。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;W&lt;/code&gt;：光标向右移动一个用空格分割的段&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;w&lt;/code&gt;会跳转到下一个符号或空格后第一个字符处，而&lt;code&gt;W&lt;/code&gt;仅会跳转到下一个空格后第一个字符处。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;b&lt;/code&gt;：光标向左移动一个单词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;B&lt;/code&gt;：光标向左移动一个用空格分割的段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;G&lt;/code&gt;：光标跳转到指定的行&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单独的&lt;code&gt;G&lt;/code&gt;会跳转到文件末尾，在&lt;code&gt;G&lt;/code&gt;前面添加数量参数时，会跳转到文件指定的行，如&lt;code&gt;42G&lt;/code&gt;会跳转到文件42行。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的指令都可以加入数量参数，如&lt;code&gt;2W&lt;/code&gt;会让光标向右移动两个用空格分割的段。&lt;/p&gt;
&lt;h3 id=&#34;修改文本&#34;&gt;修改文本
&lt;/h3&gt;&lt;h4 id=&#34;插入新文本&#34;&gt;插入新文本
&lt;/h4&gt;&lt;p&gt;前面说过，&lt;code&gt;i&lt;/code&gt;键会进入插入模式。&lt;/p&gt;
&lt;p&gt;当按下&lt;code&gt;i&lt;/code&gt;键时，请注意，此时插入光标（小竖线）是在光标（在字符闪烁的小块）的&lt;strong&gt;左边&lt;/strong&gt;的，万分注意。&lt;/p&gt;
&lt;h4 id=&#34;追加文本&#34;&gt;追加文本
&lt;/h4&gt;&lt;p&gt;追加文本，顾名思义，就是将插入光标放置在光标&lt;strong&gt;右边&lt;/strong&gt;，随后进入插入模式。&lt;/p&gt;
&lt;p&gt;某种意义上，&lt;code&gt;a&lt;/code&gt;键也是进入插入模式的一种方式。&lt;/p&gt;
&lt;h4 id=&#34;更改文本&#34;&gt;更改文本
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;c&lt;/code&gt;键为更改命令，需要指定范围，一般与移动命令结合使用。&lt;/p&gt;
&lt;p&gt;一旦生效，更改命令会删除指定范围字符，并且自动进入插入模式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还记得上面的移动指令吗？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;例如：&lt;code&gt;c&lt;/code&gt;可用于更改从光标位置开始的文本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cw&lt;/code&gt;：从&lt;strong&gt;光标位置&lt;/strong&gt;到单词结尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c2b&lt;/code&gt;：从光标位置向左两个单词&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c$&lt;/code&gt;：从光标位置到行尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c0&lt;/code&gt;：从光标位置到行首&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;与&lt;code&gt;i&lt;/code&gt;和&lt;code&gt;a&lt;/code&gt;一样，在按&lt;code&gt;Esc&lt;/code&gt;之前，你一直都处于插入模式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;cw&lt;/code&gt;指令取决于光标位置，若是光标在单词中间，则只会更改单词中间到结尾的字符。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;整行更改&#34;&gt;整行更改
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;cc&lt;/code&gt;对整行文本进行更改，无论光标处于该行何种位置，&lt;code&gt;cc&lt;/code&gt;都会替换掉整行文本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用&lt;code&gt;C&lt;/code&gt;或&lt;code&gt;c$&lt;/code&gt;来替换从&lt;strong&gt;当前光标位置&lt;/strong&gt;到行尾的所有字符。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;无论是&lt;code&gt;cc&lt;/code&gt;还是&lt;code&gt;C&lt;/code&gt;，都不用在指令末尾指定文字对象，但是可以在指令前面添加数量参数。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;字符更改&#34;&gt;字符更改
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;r&lt;/code&gt;是另一个用于替换文本的命令，该命令使用一个字符替换另一个字符，且无需按&lt;code&gt;Esc&lt;/code&gt;就可以返回命令模式。&lt;/p&gt;
&lt;p&gt;格式：&lt;code&gt;[数量参数] r [要替换成的字符]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意：数量参数会让后面多个字符替换成同一个字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s&lt;/code&gt;与&lt;code&gt;r&lt;/code&gt;的作用与命令格式相同，不同的是，使用&lt;code&gt;s&lt;/code&gt;更改后，会进入到插入模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;S&lt;/code&gt;命令可以替换整行文本，且不同于&lt;code&gt;C&lt;/code&gt;命令，&lt;code&gt;S&lt;/code&gt;命令会删除整行，之后进入插入模式，光标置于行首。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在前面加上数量参数，可以实现多行删除并进入到插入模式。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;R&lt;/code&gt;命令比较特殊，不同于&lt;code&gt;r&lt;/code&gt;，该命令会直接进入&lt;strong&gt;改写模式&lt;/strong&gt;，此时键盘输入的字符会直接逐个替换屏幕上的文本，直到按下&lt;code&gt;Esc&lt;/code&gt;。并且，当删除替换字符时，原先字符会恢复。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当按下&lt;code&gt;Enter&lt;/code&gt;时，编辑器会插入新行。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;更改大小写英文&#34;&gt;更改大小写（英文）
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;~&lt;/code&gt;可以对光标所处字符更改大小写。同样，输入数量参数可以对多个字符更改。&lt;/p&gt;
&lt;p&gt;若想更改多行，只能使用Unix指令，后面会讲解。&lt;/p&gt;
&lt;h3 id=&#34;删除文本&#34;&gt;删除文本
&lt;/h3&gt;&lt;p&gt;删除命令&lt;code&gt;d&lt;/code&gt;可用于删除文件中的任意文本。和更改命令一样，删除命令也需要文本对象。&lt;/p&gt;
&lt;p&gt;无论哪种形式的删除命令，都要先将光标移动到待删除文本的起始位置，然后输入删除命令&lt;code&gt;d&lt;/code&gt;和文本对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实，文本对象指的就是像&lt;code&gt;w&lt;/code&gt;，&lt;code&gt;2w&lt;/code&gt;一类的东西，也可以是&lt;code&gt;l&lt;/code&gt;，&lt;code&gt;2l&lt;/code&gt;这种移动指令，这会向后删除两个字符。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;单词&#34;&gt;单词
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;dw&lt;/code&gt;删除从光标所在位置开始的第一个单词。注意，单词之后的空格也会被一并删除。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;若想保留单词之后的空格，可以使用&lt;code&gt;de&lt;/code&gt;而不是&lt;code&gt;dw&lt;/code&gt;。若想连带后面标点符号也删除，请使用&lt;code&gt;dE&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;e&lt;/code&gt;指令为到达下一个单词末尾，而&lt;code&gt;E&lt;/code&gt;则移动到下一个空格分隔的单词尾部。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;行&#34;&gt;行
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dd&lt;/code&gt;：删除整个行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;D&lt;/code&gt;：从光标开始删除到末尾（等同于&lt;code&gt;d$&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;字符&#34;&gt;字符
&lt;/h4&gt;&lt;p&gt;往往，可能仅仅只是删除某个字符，却不需要修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x&lt;/code&gt;命令仅删除光标所在的字符，同样，也可以加入数量参数，删除光标及之后的更多字符。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;X&lt;/code&gt;命令则会删除光标之前的字符，支持数量参数。&lt;/p&gt;
&lt;p&gt;二者使用后都会保持命令模式不变。&lt;/p&gt;
&lt;h3 id=&#34;撤回&#34;&gt;撤回
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;u&lt;/code&gt;可以撤回上一次的&lt;strong&gt;操作&lt;/strong&gt;（如&lt;code&gt;dd&lt;/code&gt;）（Undo）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;U&lt;/code&gt;可以恢复一整行文本到原先状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ctrl+r&lt;/code&gt;可以恢复上一次的撤回操作（Redo）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;可以重复上一次的指令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，以上操作仅限于在命令模式中删除（像&lt;code&gt;x&lt;/code&gt;、&lt;code&gt;dd&lt;/code&gt;）的情况，在插入模式中删除时，仅靠&lt;code&gt;u&lt;/code&gt;并不能实现，保持插入模式之后&lt;code&gt;Ctrl+Z&lt;/code&gt;就可以了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;移动文本&#34;&gt;移动文本
&lt;/h3&gt;&lt;p&gt;每次删除一个文本块，被删除的内容就会被保存在一个特殊的无名区域，称为&lt;strong&gt;删除寄存器&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;那么，在Vim中，剪切文本的操作就是删除-&amp;gt;选取位置-&amp;gt;用放置命令&lt;code&gt;p&lt;/code&gt;这样的流程实现的。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>计算机网络</title>
        <link>https://deathofbrain.github.io/p/network-key-points/</link>
        <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate>
        
        <guid>https://deathofbrain.github.io/p/network-key-points/</guid>
        <description>&lt;h2 id=&#34;计算机网络体系结构&#34;&gt;计算机网络体系结构
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本章内容重点：三种交换（计算）、OSI分层、TCP/IP分层（记忆）、各种指标与单位（计算）&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;计算机网络概述&#34;&gt;▲计算机网络概述
&lt;/h3&gt;&lt;h4 id=&#34;概念&#34;&gt;▲概念
&lt;/h4&gt;&lt;p&gt;定义：将地理位置不同，具有独立功能的多台计算机以及外部设备通过通信线路连接起来，实现&lt;strong&gt;资源共享&lt;/strong&gt;和信息传递的操作系统。&lt;/p&gt;
&lt;h4 id=&#34;组成&#34;&gt;组成
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;需要知道哪些东西是哪个部分的就可以了&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;从组成部分看，计算机网络主要由&lt;strong&gt;硬件&lt;/strong&gt;、&lt;strong&gt;软件&lt;/strong&gt;、&lt;strong&gt;协议&lt;/strong&gt;三大部分组成。
&lt;ul&gt;
&lt;li&gt;硬件：由主机、通信链路、交换设备和网卡等组成&lt;/li&gt;
&lt;li&gt;软件：包括email程序、ftp程序等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;协议&lt;/strong&gt;：计算机网络的核心，规定了网络传输数据时所遵循的规范。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从工作方式看，可分为&lt;strong&gt;边缘部分&lt;/strong&gt;和&lt;strong&gt;核心部分&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;边缘部分：由所有连接到互联网上的供用户直接使用的主机构成，进行通信和资源共享。&lt;/li&gt;
&lt;li&gt;核心部分：大量网络和连接着的路由器组成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;从功能组成看，可分为&lt;strong&gt;通信子网&lt;/strong&gt;和&lt;strong&gt;资源子网&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;通信子网：各种传输介质、通信设备和相应网络协议组成。
&lt;ul&gt;
&lt;li&gt;使网络具有数据传输、交换、控制和存储的能力，实现数据通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;资源子网：实现资源共享的设备及其软件的集合
&lt;ul&gt;
&lt;li&gt;向网络用户提供共享其他计算机上的硬件资源、软件资源、数据资源的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;功能&#34;&gt;功能
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据通信&lt;/strong&gt;：最基本和最重要的功能，实现联网计算机之间信息的传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源共享&lt;/strong&gt;：共享软件、硬件、数据，让网络中资源互通有无。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式处理&lt;/strong&gt;：将某个复杂的任务分配给网络中其它计算机系统，提高整个系统的利用率。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提高可靠性&lt;/strong&gt;：网络中的各台计算机可以互为替代机。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;负载均衡&lt;/strong&gt;：将工作任务均衡地分配给网络中各台计算机。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;电路交换报文交换和分组交换&#34;&gt;🌟电路交换、报文交换和分组交换
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;计网计算题重点，可结合到多种题型&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;路由器&lt;/strong&gt;这个&lt;strong&gt;网络层&lt;/strong&gt;设备在网络核心部分起到重要作用。它对收到的分组进行&lt;strong&gt;存储转发&lt;/strong&gt;实现&lt;strong&gt;分组交换&lt;/strong&gt;。分组交换是现代网络最常用的交换方式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从通信资源分配的角度看，交换就是按照某种方式动态地分配传输线路的资源。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;分组交换由电路交换与报文交换发展而来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电路交换（典型：电话网）
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特点：在进行数据传输前，两个用户之间必须先建立一条专用的&lt;strong&gt;物理&lt;/strong&gt;通信路径，且传输过程中，这一路径始终被两个用户独占，直到通信结束被释放。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分为三步：建立连接（开始占用通信资源）、传输数据、释放连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E7%94%B5%E8%B7%AF%E4%BA%A4%E6%8D%A2.png&#34;
	width=&#34;1070&#34;
	height=&#34;300&#34;
	srcset=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E7%94%B5%E8%B7%AF%E4%BA%A4%E6%8D%A2_hu_24dc96a343a3143.png 480w, https://deathofbrain.github.io/p/network-key-points/images/%E7%94%B5%E8%B7%AF%E4%BA%A4%E6%8D%A2_hu_e500daeb0be2b7b3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;电路交换&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;356&#34;
		data-flex-basis=&#34;856px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整条电路上任何节点都不进行存储，直接转发，&lt;strong&gt;不存在存储转发所耗费的时间&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这一点需要记住。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点：通信时延小、有序传输、没有冲突、实时性强。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：建立连接时间长、线路利用率低、灵活性差、难以实现差错控制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;灵活性差：物理通路中，任何一点出现故障，就必须重新建立连接。&lt;/p&gt;
&lt;p&gt;难以实现差错控制：中间节点不具备存储和检验数据的能力，无法发现并纠正错误。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事实上，计算机之间的数据传输往往是突发式的（高频、少量数据），若使用电路交换，那么整个通信链路资源的利用率往往不到10%，甚至只有1%。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;报文交换——分组交换的前身&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据交换的单位是&lt;strong&gt;报文&lt;/strong&gt;。报文由用户数据、源地址和目的地址等信息组成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用&lt;strong&gt;存储转发&lt;/strong&gt;技术，整个报文先传送到相邻的节点，&lt;strong&gt;全部存储&lt;/strong&gt;后查找转发表，转发到下一个节点，如此反复，直到报文到达目的节点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;全部存储——报文交换被淘汰的原因&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不同于电路交换，每个报文都可单独选择到达目的端的路径。示例图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E6%8A%A5%E6%96%87%E4%BA%A4%E6%8D%A2.png&#34;
	width=&#34;474&#34;
	height=&#34;159&#34;
	srcset=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E6%8A%A5%E6%96%87%E4%BA%A4%E6%8D%A2_hu_be782a12be3cef81.png 480w, https://deathofbrain.github.io/p/network-key-points/images/%E6%8A%A5%E6%96%87%E4%BA%A4%E6%8D%A2_hu_529dea2db951d3c8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;报文交换&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;298&#34;
		data-flex-basis=&#34;715px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点：无建立连接时延、灵活分配线路、线路利用率高、支持差错控制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这些也是存储转发本身的优点。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：转发时延高、缓存开销大、错误处理低效。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;交换节点要把报文都存储完才能查找转发表转发到下一节点，若是报文太大，缓存开销也大，并且一旦丢包，重传代价也大。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;分组交换，就是在报文交换&lt;strong&gt;存储转发&lt;/strong&gt;的基础上，将报文划分成若干较小&lt;strong&gt;等长&lt;/strong&gt;数据段，每个数据段前面添加一些由控制信息组成的&lt;strong&gt;首部&lt;/strong&gt;，构成&lt;strong&gt;分组（Packet）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E5%88%86%E7%BB%84.png&#34;
	width=&#34;1070&#34;
	height=&#34;384&#34;
	srcset=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E5%88%86%E7%BB%84_hu_fcdb989a9ab245d8.png 480w, https://deathofbrain.github.io/p/network-key-points/images/%E5%88%86%E7%BB%84_hu_a6569516edf2d64d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;构成分组&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;278&#34;
		data-flex-basis=&#34;668px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分组交换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;流程&lt;/p&gt;
&lt;p&gt;源主机发送分组，分组交换网中的交换机收到分组后，先缓存，然后从首部提取目的地址，借由转发表，发送给下一个交换机，周而复始，直到到达目的主机。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本质上和报文交换一样&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点：存储转发开销小、传输效率高、减少出错概率与代价。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分组是逐个传输的，可以使后一个分组的存储操作与前一个分组的转发操作并行，形成&lt;strong&gt;流水线&lt;/strong&gt;，后面的图会详细表达。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：存在存储转发时延、需要传输额外信息、可能出现失序、丢失或重复分组的情况。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;失序丢包等问题是借由上层，或使用虚电路服务解决的，先不必深究。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三种交换方式的比较&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当要连续传输大量的数据，并且传送时间远大于连接建立时间时，采用电路交换更合适。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;然而，现时代，数据的传送时间肯定小于连接建立时间。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从提高整个网络的信道利用率看，报文交换和分组交换更合适&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中，分组交换比报文交换时延更小，更加灵活，尤其适合突发式数据传送。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三种传输时序图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BA%8F%E5%9B%BE.png&#34;
	width=&#34;1156&#34;
	height=&#34;798&#34;
	srcset=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BA%8F%E5%9B%BE_hu_315c74c69a76b267.png 480w, https://deathofbrain.github.io/p/network-key-points/images/%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BA%8F%E5%9B%BE_hu_27fbf94784fabc84.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;传输时序图&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;144&#34;
		data-flex-basis=&#34;347px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这东西不会画就可以埋了，做计算题必须要画的图&lt;/p&gt;
&lt;p&gt;为什么是斜的：电磁波在信道中传播需要花费时间（即使非常短），这部分时间也叫传播时延。有些题明确指出传播时延忽略不计时，那就必须要画平了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分类&#34;&gt;分类
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;记一下拓扑结构就好了&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;分布范围：广域网、城域网、局域网、个人区域网&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传输技术：广播式网络、点对点网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拓扑规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总线型：优点是建网容易、增删节点方便、节省线路；缺点是重负载时通信效率不高，总线任意一处对故障敏感。&lt;/li&gt;
&lt;li&gt;星形网络：优点是便于集中控制和管理；缺点是成本高、中央设备对故障敏感。&lt;/li&gt;
&lt;li&gt;环形网络：典型例子是令牌环局域网。&lt;/li&gt;
&lt;li&gt;网状网络：每个节点至少有两条路径与其他节点相连，常用于广域网。优点是可靠性高，缺点是控制复杂、线路成本高。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E6%8B%93%E6%89%91%E7%BD%91%E7%BB%9C.png&#34;
	width=&#34;1386&#34;
	height=&#34;308&#34;
	srcset=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E6%8B%93%E6%89%91%E7%BD%91%E7%BB%9C_hu_2e5744d571e60a2f.png 480w, https://deathofbrain.github.io/p/network-key-points/images/%E6%8B%93%E6%89%91%E7%BD%91%E7%BB%9C_hu_775c8e69fdfc46b7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;四种拓扑网络&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;450&#34;
		data-flex-basis=&#34;1080px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用者：公用网、专用网&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传输介质：有线网络、无线网络。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;性能指标&#34;&gt;🌟性能指标
&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这个不会就真埋了吧&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;速率：节点在数字信道上传送数据的速率，也称&lt;em&gt;数据传输速率&lt;/em&gt;、&lt;em&gt;数据率&lt;/em&gt;或&lt;em&gt;比特率&lt;/em&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单位：&lt;code&gt;b/s&lt;/code&gt;或&lt;code&gt;bit/s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;数据率较高时，可用&lt;code&gt;Kb/s&lt;/code&gt;、&lt;code&gt;Mb/s&lt;/code&gt;、&lt;code&gt;Gb/s&lt;/code&gt;等。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;放到常见情形，可以对应下载速率或上传速率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在计网中，K=10^3，M=10^6，G=10^9，幂数每一级+3&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;带宽：在计网中，表示网络等通信线路所能传送数据的能力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;也就是&lt;strong&gt;最高&lt;/strong&gt;数据传输速率&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;单位：&lt;code&gt;bit/s&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;吞吐量：单位时间内通过某个网络（或信道、接口）的实际数据量。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用于对实际网络的测量，以便获知有多少数据量能够通过网络。&lt;/li&gt;
&lt;li&gt;一条由多端链路组成的信道，其带宽取决于&lt;strong&gt;带宽最小&lt;/strong&gt;的那段链路。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🌟时延：指数据从网络的一段传送到另一段所需的总时间。由四部分组成：&lt;strong&gt;发送时延&lt;/strong&gt;、&lt;strong&gt;传播时延&lt;/strong&gt;、&lt;strong&gt;处理时延&lt;/strong&gt;和&lt;strong&gt;排队时延&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发送时延：又称&lt;strong&gt;传输时延&lt;/strong&gt;，节点将分组的所有比特推向链路所花的时间。
&lt;blockquote&gt;
&lt;p&gt;即从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所花的时间。&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;公式：&lt;code&gt;发送时延 = 分组长度 / 发送速率&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传播时延：电磁波在信道中传播一定距离所花时间，即一个比特从&lt;strong&gt;链路的一端&lt;/strong&gt;到&lt;strong&gt;另一段&lt;/strong&gt;所需时间。
&lt;ul&gt;
&lt;li&gt;公式：&lt;code&gt;传播时延 = 信道长度 / 电磁波在信道上的传播速率&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;传输时延和传播时延一定要区分开，不然没分了&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;处理时延：分组在交换节点为存储转发而进行的一些必要处理所花的时间。&lt;/li&gt;
&lt;li&gt;排队时延：分组在路由器的输入队列或输出队列中排队等待所花时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;处理时延与排队时延一般忽略不计，或者题目直接给出时间。
因此，&lt;code&gt;总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时延带宽积：指发送端发送的第一个比特即将到达终点时，发送端已经发送了多少比特。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;时延带宽积 = 传播时延 x 信道带宽&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;想象成圆柱形管道，长度为传播时延，横截面积表示链路带宽，则时延带宽积表示&lt;strong&gt;该管道可以容纳的比特数量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E9%93%BE%E8%B7%AF%E7%AE%A1%E9%81%93.png&#34;
	width=&#34;872&#34;
	height=&#34;212&#34;
	srcset=&#34;https://deathofbrain.github.io/p/network-key-points/images/%E9%93%BE%E8%B7%AF%E7%AE%A1%E9%81%93_hu_c57d9d92aa3b7754.png 480w, https://deathofbrain.github.io/p/network-key-points/images/%E9%93%BE%E8%B7%AF%E7%AE%A1%E9%81%93_hu_f04528a20c3241eb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;管道&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;411&#34;
		data-flex-basis=&#34;987px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;🌟往返时延（&lt;strong&gt;RTT&lt;/strong&gt;）：指从发送端发出一个短分组，到发送端收到&lt;strong&gt;来自接收端的确认&lt;/strong&gt;（接收端收到数据后立刻发送确认）总共经历的时间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RTT包括各中间节点的处理时延、排队时延以及转发数据时的发送时延。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://deathofbrain.github.io/p/network-key-points/images/RTT.png&#34;
	width=&#34;1969&#34;
	height=&#34;1141&#34;
	srcset=&#34;https://deathofbrain.github.io/p/network-key-points/images/RTT_hu_22cbac0eb0121898.png 480w, https://deathofbrain.github.io/p/network-key-points/images/RTT_hu_ece94b1afc84e8c3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;RTT&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;414px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信道利用率：指出信道有数据通过时间占总时间的百分比&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;信道利用率 = 有数据通过时间 / （有数据通过时间 + 无数据通过时间）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;信道利用率&lt;strong&gt;并非越高越好&lt;/strong&gt;，太低会浪费资源，太高会&lt;strong&gt;造成拥堵&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>数据结构</title>
        <link>https://deathofbrain.github.io/p/structure-key-points/</link>
        <pubDate>Tue, 24 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>https://deathofbrain.github.io/p/structure-key-points/</guid>
        <description>&lt;h2 id=&#34;绪论&#34;&gt;绪论
&lt;/h2&gt;&lt;h3 id=&#34;数据结构的基本概念&#34;&gt;数据结构的基本概念
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;逻辑结构&lt;/p&gt;
&lt;p&gt;逻辑结构是指数据对象中&lt;strong&gt;数据元素之间的相互关系&lt;/strong&gt;，即从&lt;strong&gt;逻辑上&lt;/strong&gt;描述数据元素之间的关系。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意与存储结构之间做区分&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;逻辑结构分为&lt;strong&gt;线性结构&lt;/strong&gt;和&lt;strong&gt;非线性结构&lt;/strong&gt;，再细分为&lt;strong&gt;集合结构&lt;/strong&gt;、&lt;strong&gt;线性结构&lt;/strong&gt;、&lt;strong&gt;树形结构&lt;/strong&gt;和&lt;strong&gt;图形结构&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基本上是判断一个数据结构是属于哪种逻辑结构，所以心中有数就好。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储结构&lt;/p&gt;
&lt;p&gt;存储结构则是指数据对象中数据元素之间的&lt;strong&gt;存储关系&lt;/strong&gt;，即从&lt;strong&gt;物理上&lt;/strong&gt;描述数据元素之间的关系。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;逻辑结构是你看到的，存储结构是计算机看到的。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;存储结构分为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;顺序存储结构&lt;/strong&gt;：逻辑上相邻的元素在物理上也相邻&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;链式存储结构&lt;/strong&gt;：逻辑上相邻的元素在物理上不一定相邻&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引存储结构&lt;/strong&gt;：在存储结构中增加附加的索引表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;散列存储结构&lt;/strong&gt;：根据关键字直接计算出存储地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据的运算
数据的运算是指对数据对象进行的操作，包括&lt;strong&gt;运算的定义&lt;/strong&gt;和&lt;strong&gt;运算的实现&lt;/strong&gt;两个方面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：运算的定义是针对逻辑结构的（如树的遍历等），运算的实现是针对存储结构的（对树的遍历来说，顺序存储和链式存储算法实现一定不同）。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;数据的逻辑结构独立于存储结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图的邻接表和邻接矩阵都可以表示图这种逻辑结构。&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在存储数据时，不仅要存储数据元素本身，还要存储数据元素之间的逻辑关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;时间复杂度和空间复杂度-&#34;&gt;时间复杂度和空间复杂度 (⭐)
&lt;/h3&gt;&lt;p&gt;每年必考，常见于选择题第一题和算法题第三小问。其中算法题主要是去研究&lt;strong&gt;你写的&lt;/strong&gt;算法的时空复杂度，选择题则是考察&lt;strong&gt;一段代码&lt;/strong&gt;的时空复杂度。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;时空复杂度的加法规则和乘法规则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;加法规则：$T(n) = O(max(f(n),g(n)))$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两个算法串行执行时，时间复杂度取最大值&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// O(n)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// O(n^2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// func的时间复杂度为O(n^2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;乘法规则：$T(n) = O(f(n) \times g(n))$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两个算法嵌套执行时，时间复杂度相乘&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;func2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// O(n)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;func1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// O(n^2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// O(n) * O(n^2) = O(n^3)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// func2的时间复杂度为O(n^3)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算时间复杂度的通用办法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单层嵌套&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;待续……&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>归档</title>
        <link>https://deathofbrain.github.io/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://deathofbrain.github.io/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>关于</title>
        <link>https://deathofbrain.github.io/%E5%85%B3%E4%BA%8E/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://deathofbrain.github.io/%E5%85%B3%E4%BA%8E/</guid>
        <description>&lt;p&gt;This is a test page for i18n support.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>搜索</title>
        <link>https://deathofbrain.github.io/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://deathofbrain.github.io/search/</guid>
        <description></description>
        </item>
        <item>
        <title>友情链接</title>
        <link>https://deathofbrain.github.io/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://deathofbrain.github.io/%E5%8F%8B%E6%83%85%E9%93%BE%E6%8E%A5/</guid>
        <description>&lt;p&gt;To use this feature, add &lt;code&gt;links&lt;/code&gt; section to frontmatter.&lt;/p&gt;
&lt;p&gt;This page&amp;rsquo;s frontmatter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;GitHub is the world&amp;#39;s largest software development platform.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;website&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://www.typescriptlang.org&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ts-logo-128.jpg&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;image&lt;/code&gt; field accepts both local and external images.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
